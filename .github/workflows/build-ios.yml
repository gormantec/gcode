name: build-iOS

on:
  push:
    branches:
      - master
    paths:
      - apps/**
      - '!**/ios/**'
      - '!**/apk/**'
      - '!**.xcarchive/Info.plist'
      - '!apps/gcode_manifests.json'

jobs:
  build:
    name: Build and Test default scheme using any available iPhone simulator
    runs-on: [macos]
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v19
      - name: List all changed files
        run: |
          oldIFS="$IFS"
          IFS=$'\n'
          for file in ${{ steps.changed-files.outputs.all_changed_files }}; do
            echo "$file was changed"
            if [[ "$file" == "apps/"* ]] && [[ "$file" != "apps/gcode_manifests.json" ]]; then
              echo "found app=$file"
              APP_NAME=$(echo "$file" | sed -e 's/apps\///g' | sed -e 's/\/.*//g')
              echo "APP_NAME=$APP_NAME"
            fi
          done
          IFS="$oldIFS"
          if [ -z ${APP_NAME+x} ]; then 
            echo "APP_NAME not found"
            exit 0
          fi
          SHORT_NAME=`grep '"short_name"' ./apps/$APP_NAME/manifest.json | sed -r 's/^[^:]*:.*"(.*)".*$/\1/'`
          THEME_COLOR=`grep '"theme_color"' ./apps/$APP_NAME/manifest.json | sed -r 's/^[^:]*:.*"(.*)".*$/\1/'`
          BACKGROUND_COLOR=`grep '"background_color"' ./apps/$APP_NAME/manifest.json | sed -r 's/^[^:]*:.*"(.*)".*$/\1/'`
          echo "APP_NAME=$(echo $APP_NAME)" >> $GITHUB_ENV
          echo "SHORT_NAME=$(echo $SHORT_NAME)" >> $GITHUB_ENV
          echo "THEME_COLOR=$(echo $THEME_COLOR)" >> $GITHUB_ENV
          echo "BACKGROUND_COLOR=$(echo $BACKGROUND_COLOR)" >> $GITHUB_ENV
      - name: setup node
        uses: actions/setup-node@v3.3.0
        with:
          node-version: '>=16.0.0'
      - name: pwaBuilder build IOS
        run: | 
          echo "APP_NAME = $APP_NAME"
          node -v
          npm install node-fetch
          pwd
          mkdir build 
          cd build
          pwd
          ls
          node ../modules/pwabuilder/buildIIOS.mjs
          unzip -q pwa.zip
          ls
      - name: Set Default Scheme
        run: |
          cd build/src
          scheme_list=$(xcodebuild -list -json | tr -d "\n")
          default=$(echo $scheme_list | ruby -e "require 'json'; puts JSON.parse(STDIN.gets)['project']['targets'][0]")
          echo $default | cat >default
          echo Using default scheme: $default
      - name: Build
        env:
          scheme: ${{ 'default' }}
          platform: ${{ 'iOS' }}
        run: |
          cd build
          BASE_DIR_VAR=$(pwd)
          OUT_DIR_VAR="$BASE_DIR_VAR/out"
          mkdir -p out
          cd src

          
          # xcrun xctrace returns via stderr, not the expected stdout (see https://developer.apple.com/forums/thread/663959)
          device=`xcrun xctrace list devices 2>&1 | grep -oE 'iPhone.*?[^\(]+' | head -1 | awk '{$1=$1;print}' | sed -e "s/ Simulator$//"`
          if [ $scheme = default ]; then scheme=$(cat default); fi
          if [ "`ls -A | grep -i \\.xcworkspace\$`" ]; then filetype_parameter="workspace" && file_to_build="`ls -A | grep -i \\.xcworkspace\$`"; else filetype_parameter="project" && file_to_build="`ls -A | grep -i \\.xcodeproj\$`"; fi
          file_to_build=`echo $file_to_build | awk '{$1=$1;print}'`
          echo "file_to_build = $file_to_build"
          echo "filetype_parameter = $filetype_parameter"

          
          echo "OUT_DIR_VAR = $OUT_DIR_VAR"

          xcodebuild clean
          pod install
          if [[ $platform == "iOS" ]]; then
            echo "Archive"
            xcodebuild archive -scheme "$scheme" -"$filetype_parameter" "$file_to_build" -sdk iphoneos -allowProvisioningUpdates -allowProvisioningDeviceRegistration -archivePath "$OUT_DIR_VAR/$APP_NAME.xcarchive" -quiet DEVELOPMENT_TEAM=9R8LPM6UR2
            echo "Export"
            xcodebuild -exportArchive -archivePath "$OUT_DIR_VAR/$APP_NAME.xcarchive" -allowProvisioningUpdates -allowProvisioningDeviceRegistration -exportOptionsPlist ../../modules/pwabuilder/iosExpot.plist -exportPath "$OUT_DIR_VAR/ipa"  -quiet DEVELOPMENT_TEAM=9R8LPM6UR2
          fi
          if [[ $platform == "iOS Simulator" ]]; then
            echo"Simulate"
            BUILD_DIR=`xcodebuild -scheme "$scheme" -"$filetype_parameter" "$file_to_build" -destination "platform=$platform,name=$device" -showBuildSettings | grep -m 1 "BUILD_DIR" | grep -oEi "\/.*"`
            echo "BUILD_DIR = $BUILD_DIR"
            BUILT_PRODUCTS_DIR=`xcodebuild -scheme "$scheme" -"$filetype_parameter" "$file_to_build" -destination "platform=$platform,name=$device" -showBuildSettings | grep -m 1 "BUILT_PRODUCTS_DIR" | grep -oEi "\/.*"`
            xcodebuild -allowProvisioningUpdates -scheme "$scheme" -"$filetype_parameter" "$file_to_build" -destination "platform=$platform,name=$device" -quiet DEVELOPMENT_TEAM=9R8LPM6UR2
          fi
          
          cd $OUT_DIR_VAR
          ls -latr
      - name: move to apps/ipa dir # Move the generated files into output folder # xcodebuild -allowProvisioningUpdates -scheme "$scheme" -archivePath "$OUT_DIR_VAR/$APP_NAME.xcarchive" archive DEVELOPMENT_TEAM=9R8LPM6UR2
        run: |
          BASE_DIR_VAR=$(pwd)
          echo "APP_NAME $APP_NAME"
          mkdir -p apps/$APP_NAME/ios
          rm -rf apps/$APP_NAME/ios/*
          cp -f modules/pwabuilder/isoHtml.plist ./apps/$APP_NAME/ios/$APP_NAME.plist  
          SPLIT="-"
          VINDEX=${APP_NAME/$SPLIT*/$SPLIT}
          VINDEX=${#VINDEX}
          SHORT_APP_NAME=${APP_NAME:$VINDEX}
          SHORT_APP_NAME=`echo "$SHORT_APP_NAME" | sed -r 's/[-\/\\\+\_]+/ /g'`
          SHORT_APP_NAME_NOS=`echo "$SHORT_APP_NAME" | sed -r 's/[ -\/\\\+\_]+//g'`
          sed -i '' "s/##APP_NAME##/$APP_NAME/g" ./apps/$APP_NAME/ios/$APP_NAME.plist  
          sed -i '' "s/##SHORT_APP_NAME##/$SHORT_APP_NAME/g" ./apps/$APP_NAME/ios/$APP_NAME.plist  
          sed -i '' "s/##SHORT_APP_NAME_NOS##/$SHORT_APP_NAME_NOS/g" ./apps/$APP_NAME/ios/$APP_NAME.plist  
          cp -rf build/out/* ./apps/$APP_NAME/ios/     
          git config --local user.email "craig@gormantec.com"
          git config --local user.name "gormantec"
          git add ./apps/$APP_NAME/ios
          git commit -m "Add changes"

      - name: Push changes # push the output folder to your repo
        uses: ad-m/github-push-action@master
        with:
          branch: master #ignore if your branch is master
          github_token: ${{ secrets.GITHUB_TOKEN }}
          force: true