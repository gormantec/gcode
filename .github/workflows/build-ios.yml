name: build-iOS

on:
  push:
    branches:
      - master
    paths:
      - apps/**
      - '!**/ios/**'
      - '!**/apk/**'
      - '!**.xcarchive/Info.plist'
      - '!apps/gcode_manifests.json'
      
concurrency:
  group: iOS ${{ github.event.head_commit.message }}
  cancel-in-progress: true
jobs: 
  build:
    name: Build Achive and Export IPA
    runs-on: [macos]
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Get details from manifest
        run: |
          echo ${{ github.event.head_commit.message }}
          APP_NAME="${{ github.event.head_commit.message }}"
          APP_NAME=${APP_NAME:7}
          echo "[$APP_NAME]"
          echo "[$APP_NAME]"
          SHORT_NAME=`grep '"short_name"' ./apps/$APP_NAME/manifest.json | sed -r 's/^[^:]*:.*"(.*)".*$/\1/'`
          THEME_COLOR=`grep '"theme_color"' ./apps/$APP_NAME/manifest.json | sed -r 's/^[^:]*:.*"(.*)".*$/\1/'`
          BACKGROUND_COLOR=`grep '"background_color"' ./apps/$APP_NAME/manifest.json | sed -r 's/^[^:]*:.*"(.*)".*$/\1/'`
          SHORT_NAME_NOSP=`echo "$SHORT_NAME" | sed 's/ //g'`
          echo "APP_NAME=$(echo $APP_NAME)" >> $GITHUB_ENV
          echo "SHORT_NAME=$(echo $SHORT_NAME)" >> $GITHUB_ENV
          echo "SHORT_NAME_NOSP=$(echo $SHORT_NAME_NOSP)" >> $GITHUB_ENV
          echo "THEME_COLOR=$(echo $THEME_COLOR)" >> $GITHUB_ENV
          echo "BACKGROUND_COLOR=$(echo $BACKGROUND_COLOR)" >> $GITHUB_ENV  
          APP_VERSION=`grep '"version"' ./apps/$APP_NAME/manifest.json | sed -r 's/^[^:]*:.*"(.*)".*$/\1/'`
          APP_MAIN_VERSION=${APP_VERSION%.*}
          APP_SUB_VERSION=${APP_VERSION##*.}
          echo "APP_VERSION=$(echo $APP_VERSION)" >> $GITHUB_ENV
          echo "APP_MAIN_VERSION=$(echo $APP_MAIN_VERSION)" >> $GITHUB_ENV
          echo "APP_SUB_VERSION=$(echo $APP_SUB_VERSION)" >> $GITHUB_ENV
      - name: setup node
        uses: actions/setup-node@v3.3.0
        with:
          node-version: '>=16.0.0'
      - name: Environment
        run: env
      - name: pwaBuilder build IOS
        env:
          TEAM_ID: ${{ env.TEAM_ID }}
        run: | 
          echo "APP_NAME = $APP_NAME"
          echo "APP_VERSION = $APP_VERSION"
          echo "TEAM_ID = ${{ env.TEAM_ID }}"
          echo "TEAM_ID = $TEAM_ID"
          echo "TEAM_ID-----------"
          echo $env.TEAM_ID
          echo "TEAM_ID-----------"
          echo ${{ env.TEAM_ID }}
          echo "TEAM_ID-----------"
          node -v
          npm install node-fetch
          pwd
          rm -f build
          mkdir -p build 
          cd build
          pwd
          ls
          node ../modules/pwabuilder/buildIIOS.mjs
          unzip -q pwa.zip
          ls
      - name: Set Default Scheme
        run: |
          cd build/src
          scheme_list=$(xcodebuild -list -json | tr -d "\n")
          default=$(echo $scheme_list | ruby -e "require 'json'; puts JSON.parse(STDIN.gets)['project']['targets'][0]")
          echo $default | cat >default
          echo Using default scheme: $default
      - name: Build
        timeout-minutes: 10
        env:
          scheme: ${{ 'default' }}
          platform: ${{ 'iOS' }}
        run: |
          cd build
          BASE_DIR_VAR=$(pwd)
          OUT_DIR_VAR="$BASE_DIR_VAR/out"
          mkdir -p out
          cd src
          project_file="`ls -A | grep -i \\.xcodeproj\$`"
          IOS_VERSION=`cat "$project_file/project.pbxproj" | grep IPHONEOS_DEPLOYMENT_TARGET -m 1 | sed -e 's/\t//g'| sed -e 's/IPHONEOS_DEPLOYMENT_TARGET = //g' | sed -e 's/;//g'`
          IOS_VERSION=$(echo $IOS_VERSION | sed -e 's/\r//g')
          BUILD_VERSION="${IOS_VERSION}.${APP_SUB_VERSION}"
          echo "BUILD_VERSION=$(echo $BUILD_VERSION)" >> $GITHUB_ENV
          echo "IOS_VERSION = $IOS_VERSION"
          echo "BUILD_VERSION = $BUILD_VERSION"
          echo "MARKETING_VERSION = $APP_MAIN_VERSION"

          # xcrun xctrace returns via stderr, not the expected stdout (see https://developer.apple.com/forums/thread/663959)
          if [ $scheme = default ]; then scheme=$(cat default); fi
          if [ "`ls -A | grep -i \\.xcworkspace\$`" ]; then filetype_parameter="workspace" && file_to_build="`ls -A | grep -i \\.xcworkspace\$`"; else filetype_parameter="project" && file_to_build="`ls -A | grep -i \\.xcodeproj\$`"; fi
          file_to_build=`echo $file_to_build | awk '{$1=$1;print}'`
          echo "file_to_build = $file_to_build"
          echo "filetype_parameter = $filetype_parameter"
          echo "OUT_DIR_VAR = $OUT_DIR_VAR"
          
          sed -i '' "s/CURRENT_PROJECT_VERSION = 1\;/CURRENT_PROJECT_VERSION = $BUILD_VERSION;/g" "$project_file/project.pbxproj"
          sed -i '' "s/MARKETING_VERSION = 1\;/MARKETING_VERSION = $APP_MAIN_VERSION;/g" "$project_file/project.pbxproj"
          sed -i '' "s/DEVELOPMENT_TEAM = \"\"/DEVELOPMENT_TEAM = ${{ env.TEAM_ID }}/g" "$project_file/project.pbxproj"
          cat "$project_file/project.pbxproj" | grep MARKETING_VERSION
          cat "$project_file/project.pbxproj" | grep CURRENT_PROJECT_VERSION
          cat "$project_file/project.pbxproj" | grep DEVELOPMENT_TEAM
          #echo "DO CLEAN"
          #xcodebuild clean
          #echo "DONE CLEAN"
          pod install
          if [[ $platform == "iOS" ]]; then
            echo "Archive: xcodebuild archive -scheme $scheme - $filetype_parameter $file_to_build -sdk iphoneos -destination generic/platform=iOS -allowProvisioningUpdates -allowProvisioningDeviceRegistration -archivePath $OUT_DIR_VAR/$APP_NAME.xcarchive -quiet DEVELOPMENT_TEAM=${{ env.TEAM_ID }}"
            echo "Export"
            xcodebuild archive -scheme "$scheme" -"$filetype_parameter" "$file_to_build" -sdk iphoneos -destination generic/platform=iOS -allowProvisioningUpdates -allowProvisioningDeviceRegistration -archivePath "$OUT_DIR_VAR/$APP_NAME.xcarchive" -quiet DEVELOPMENT_TEAM=${{ env.TEAM_ID }}
            echo "Export"
            xcodebuild -exportArchive -archivePath "$OUT_DIR_VAR/$APP_NAME.xcarchive" -allowProvisioningUpdates -allowProvisioningDeviceRegistration -exportOptionsPlist ../../modules/pwabuilder/iosExpot.plist -exportPath "$OUT_DIR_VAR/ipa" -quiet DEVELOPMENT_TEAM=${{ env.TEAM_ID }}
          fi
          if [[ $platform == "iOS Simulator" ]]; then
            echo"Simulate"
            BUILD_DIR=`xcodebuild -scheme "$scheme" -"$filetype_parameter" "$file_to_build" -destination "platform=$platform,name=$device" -showBuildSettings | grep -m 1 "BUILD_DIR" | grep -oEi "\/.*"`
            echo "BUILD_DIR = $BUILD_DIR"
            BUILT_PRODUCTS_DIR=`xcodebuild -scheme "$scheme" -"$filetype_parameter" "$file_to_build" -destination "platform=$platform,name=$device" -showBuildSettings | grep -m 1 "BUILT_PRODUCTS_DIR" | grep -oEi "\/.*"`
            xcodebuild -allowProvisioningUpdates  -scheme "$scheme" -"$filetype_parameter" "$file_to_build" -destination "platform=$platform,name=$device" -quiet DEVELOPMENT_TEAM=${{ env.TEAM_ID }}
          fi
          cd $OUT_DIR_VAR
          ls -latr
      - name: move to apps/ipa dir 
        timeout-minutes: 10 
        run: |
          BASE_DIR_VAR=$(pwd)
          echo "APP_NAME $APP_NAME"
          mkdir -p apps/$APP_NAME/ios
          rm -rf apps/$APP_NAME/ios/*
          cp -f modules/pwabuilder/ipa_manifest.plist ./apps/$APP_NAME/ios/ipa_manifest.plist
          cp -f modules/pwabuilder/ipa_link.html ./apps/$APP_NAME/ios/ipa_link.html
          SPLIT="-"
          VINDEX=${APP_NAME/$SPLIT*/$SPLIT}
          VINDEX=${#VINDEX}
          SHORT_APP_NAME=$SHORT_NAME
          echo "SHORT_APP_NAME = $SHORT_APP_NAME"
          SHORT_APP_NAME_NOS=$SHORT_NAME_NOSP
          echo "SHORT_APP_NAME_NOS = $SHORT_APP_NAME_NOS"
          sed -i '' "s/##APP_NAME##/$APP_NAME/g" ./apps/$APP_NAME/ios/ipa_manifest.plist 
          sed -i '' "s/##APP_NAME##/$APP_NAME/g" ./apps/$APP_NAME/ios/ipa_link.html  
          sed -i '' "s/##SHORT_APP_NAME##/$SHORT_APP_NAME/g" ./apps/$APP_NAME/ios/ipa_manifest.plist  
          sed -i '' "s/##SHORT_APP_NAME_NOS##/$SHORT_APP_NAME_NOS/g" ./apps/$APP_NAME/ios/ipa_manifest.plist  
          cp -rf build/out/* ./apps/$APP_NAME/ios/  
          ls -latr ./apps/$APP_NAME/ios
          rm -rf ./apps/$APP_NAME/ios/$APP_NAME.xcarchive
          echo "-------------------------------"
          ls -latr ./apps/$APP_NAME/ios
          rm -rf build
          git config --local user.email "craig@gormantec.com"
          git config --local user.name "gormantec"
          git add ./apps/$APP_NAME/ios
          git commit -m "Add changes" -a
          git pull --rebase
          git push
