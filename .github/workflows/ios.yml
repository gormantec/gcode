name: iOS starter workflow

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    name: Build and Test default scheme using any available iPhone simulator
    runs-on: macos-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup Node.js environment
        uses: actions/setup-node@v3.3.0
        with:
          node-version: '>=16.0.0'
      - run: | 
          node -v
          npm install node-fetch
          pwd
          mkdir build 
          cd build
          pwd
          ls
          node ../modules/pwabuilder/buildIIOS.mjs   
          unzip pwa.zip
          ls
      - name: Set Default Scheme
        run: |
          cd build/src
          scheme_list=$(xcodebuild -list -json | tr -d "\n")
          default=$(echo $scheme_list | ruby -e "require 'json'; puts JSON.parse(STDIN.gets)['project']['targets'][0]")
          echo $default | cat >default
          echo Using default scheme: $default
      - name: Build
        env:
          scheme: ${{ 'default' }}
          platform: ${{ 'iOS Simulator' }}
        run: |
          cd build
          BASE_DIR_VAR=$(pwd)
          OUT_DIR_VAR="$BASE_DIR_VAR/out"
          mkdir -p out
          cd src

          
          # xcrun xctrace returns via stderr, not the expected stdout (see https://developer.apple.com/forums/thread/663959)
          device=`xcrun xctrace list devices 2>&1 | grep -oE 'iPhone.*?[^\(]+' | head -1 | awk '{$1=$1;print}' | sed -e "s/ Simulator$//"`
          if [ $scheme = default ]; then scheme=$(cat default); fi
          if [ "`ls -A | grep -i \\.xcworkspace\$`" ]; then filetype_parameter="workspace" && file_to_build="`ls -A | grep -i \\.xcworkspace\$`"; else filetype_parameter="project" && file_to_build="`ls -A | grep -i \\.xcodeproj\$`"; fi
          file_to_build=`echo $file_to_build | awk '{$1=$1;print}'`

          echo "BUILD_DIR = $BUILD_DIR"
          xcodebuild -scheme "$scheme" -showBuildSettings
          BUILD_DIR=`xcodebuild -scheme "$scheme" -showBuildSettings | grep -m 1 "BUILD_DIR" | grep -oEi "\/.*"`
          echo "BUILD_DIR = $BUILD_DIR"
          echo "OUT_DIR_VAR = $OUT_DIR_VAR"
          pod install
          xcodebuild -scheme "$scheme" -"$filetype_parameter" "$file_to_build" -destination "platform=$platform,name=$device"

          cp -R $BUILD_DIR $OUT_DIR_VAR
          cd $OUT_DIR_VAR
          ls -latr
      - name: move to apps/ipa dir # Move the generated files into output folder
        run: |
          cd build/src
          ls -latr
          cd ..
          cd ..
          APP_NAME="screen_time"
          echo "APP_NAME $APP_NAME"
          mkdir -p apps/$APP_NAME/ios
          rm -f apps/$APP_NAME/ios/*
          cp -rf build/out/*.app ./apps/$APP_NAME/ios/
          cp -rf build/out/*.ipa ./apps/$APP_NAME/ios/       
          git config --local user.email "craig@gormantec.com"
          git config --local user.name "gormantec"
          git add ./apps/$APP_NAME/ios
          git commit -m "Add changes"

      - name: Push changes # push the output folder to your repo
        uses: ad-m/github-push-action@master
        with:
          branch: master #ignore if your branch is master
          github_token: ${{ secrets.GITHUB_TOKEN }}
          force: true